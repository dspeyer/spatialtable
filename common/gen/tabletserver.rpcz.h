// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tabletserver.proto

#ifndef RPCZ_tabletserver_2eproto__INCLUDED
#define RPCZ_tabletserver_2eproto__INCLUDED

#include <string>
#include <rpcz/service.hpp>

namespace google {
namespace protobuf {
class ServiceDescriptor;
class MethodDescriptor;
}  // namespace protobuf
}  // namespace google
namespace rpcz {
class rpc;
class closure;
class rpc_channel;
}  //namesacpe rpcz
#include "tabletserver.pb.h"
void rpcz_protobuf_AssignDesc_tabletserver_2eproto();
void rpcz_protobuf_ShutdownFile_tabletserver_2eproto();

class TabletServerService_Stub;

class TabletServerService : public rpcz::service {
 protected:
  // This class should be treated as an abstract interface.
  inline TabletServerService() {};
 public:
  virtual ~TabletServerService();

  typedef TabletServerService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void CreateTable(const ::Table& request,
                       ::rpcz::reply< ::Status> response);
  virtual void Insert(const ::InsertRequest& request,
                       ::rpcz::reply< ::Status> response);
  virtual void Remove(const ::RemoveRequest& request,
                       ::rpcz::reply< ::Status> response);
  virtual void Query(const ::QueryRequest& request,
                       ::rpcz::reply< ::QueryResponse> response);
  virtual void ListTablets(const ::ListRequest& request,
                       ::rpcz::reply< ::ListResponse> response);
  virtual void LoadTablet(const ::LoadRequest& request,
                       ::rpcz::reply< ::Status> response);
  virtual void UnLoadTablet(const ::UnLoadRequest& request,
                       ::rpcz::reply< ::Status> response);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void call_method(const ::google::protobuf::MethodDescriptor* method,
                  const ::google::protobuf::Message& request,
                  ::rpcz::server_channel* channel);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(TabletServerService);
};

class TabletServerService_Stub {
 public:
  TabletServerService_Stub(::rpcz::rpc_channel* channel, 
                   bool owns_channel=false);
  TabletServerService_Stub(::rpcz::rpc_channel* channel, 
                   const ::std::string& service_name,
                   bool owns_channel=false);
  ~TabletServerService_Stub();

  inline ::rpcz::rpc_channel* channel() { return channel_; }


  void CreateTable(const ::Table& request,
                       ::Status* response,
                       ::rpcz::rpc* rpc,                     ::rpcz::closure* done);
  void CreateTable(const ::Table& request,
                       ::Status* response,
                       long deadline_ms = -1);
  void Insert(const ::InsertRequest& request,
                       ::Status* response,
                       ::rpcz::rpc* rpc,                     ::rpcz::closure* done);
  void Insert(const ::InsertRequest& request,
                       ::Status* response,
                       long deadline_ms = -1);
  void Remove(const ::RemoveRequest& request,
                       ::Status* response,
                       ::rpcz::rpc* rpc,                     ::rpcz::closure* done);
  void Remove(const ::RemoveRequest& request,
                       ::Status* response,
                       long deadline_ms = -1);
  void Query(const ::QueryRequest& request,
                       ::QueryResponse* response,
                       ::rpcz::rpc* rpc,                     ::rpcz::closure* done);
  void Query(const ::QueryRequest& request,
                       ::QueryResponse* response,
                       long deadline_ms = -1);
  void ListTablets(const ::ListRequest& request,
                       ::ListResponse* response,
                       ::rpcz::rpc* rpc,                     ::rpcz::closure* done);
  void ListTablets(const ::ListRequest& request,
                       ::ListResponse* response,
                       long deadline_ms = -1);
  void LoadTablet(const ::LoadRequest& request,
                       ::Status* response,
                       ::rpcz::rpc* rpc,                     ::rpcz::closure* done);
  void LoadTablet(const ::LoadRequest& request,
                       ::Status* response,
                       long deadline_ms = -1);
  void UnLoadTablet(const ::UnLoadRequest& request,
                       ::Status* response,
                       ::rpcz::rpc* rpc,                     ::rpcz::closure* done);
  void UnLoadTablet(const ::UnLoadRequest& request,
                       ::Status* response,
                       long deadline_ms = -1);
 private:
  ::rpcz::rpc_channel* channel_;
  ::std::string service_name_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(TabletServerService_Stub);
};

#endif  // RPCZ_tabletserver_2eproto__INCLUDED
