// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tabletserver.proto

#ifndef PROTOBUF_tabletserver_2eproto__INCLUDED
#define PROTOBUF_tabletserver_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_tabletserver_2eproto();
void protobuf_AssignDesc_tabletserver_2eproto();
void protobuf_ShutdownFile_tabletserver_2eproto();

class Box;
class Row;
class Table;
class Status;
class InsertRequest;
class RemoveRequest;
class QueryRequest;
class QueryResponse;
class ListRequest;
class TabletDescription;
class ListResponse;

enum Status_StatusValues {
  Status_StatusValues_Success = 0,
  Status_StatusValues_WrongDimension = 1,
  Status_StatusValues_NoSuchTablet = 2,
  Status_StatusValues_NoSuchRow = 3
};
bool Status_StatusValues_IsValid(int value);
const Status_StatusValues Status_StatusValues_StatusValues_MIN = Status_StatusValues_Success;
const Status_StatusValues Status_StatusValues_StatusValues_MAX = Status_StatusValues_NoSuchRow;
const int Status_StatusValues_StatusValues_ARRAYSIZE = Status_StatusValues_StatusValues_MAX + 1;

const ::google::protobuf::EnumDescriptor* Status_StatusValues_descriptor();
inline const ::std::string& Status_StatusValues_Name(Status_StatusValues value) {
  return ::google::protobuf::internal::NameOfEnum(
    Status_StatusValues_descriptor(), value);
}
inline bool Status_StatusValues_Parse(
    const ::std::string& name, Status_StatusValues* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Status_StatusValues>(
    Status_StatusValues_descriptor(), name, value);
}
// ===================================================================

class Box : public ::google::protobuf::Message {
 public:
  Box();
  virtual ~Box();

  Box(const Box& from);

  inline Box& operator=(const Box& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Box& default_instance();

  void Swap(Box* other);

  // implements Message ----------------------------------------------

  Box* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Box& from);
  void MergeFrom(const Box& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double start = 1;
  inline int start_size() const;
  inline void clear_start();
  static const int kStartFieldNumber = 1;
  inline double start(int index) const;
  inline void set_start(int index, double value);
  inline void add_start(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      start() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_start();

  // repeated double end = 2;
  inline int end_size() const;
  inline void clear_end();
  static const int kEndFieldNumber = 2;
  inline double end(int index) const;
  inline void set_end(int index, double value);
  inline void add_end(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      end() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_end();

  // @@protoc_insertion_point(class_scope:Box)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< double > start_;
  ::google::protobuf::RepeatedField< double > end_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_tabletserver_2eproto();
  friend void protobuf_AssignDesc_tabletserver_2eproto();
  friend void protobuf_ShutdownFile_tabletserver_2eproto();

  void InitAsDefaultInstance();
  static Box* default_instance_;
};
// -------------------------------------------------------------------

class Row : public ::google::protobuf::Message {
 public:
  Row();
  virtual ~Row();

  Row(const Row& from);

  inline Row& operator=(const Row& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Row& default_instance();

  void Swap(Row* other);

  // implements Message ----------------------------------------------

  Row* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Row& from);
  void MergeFrom(const Row& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Box box = 1;
  inline bool has_box() const;
  inline void clear_box();
  static const int kBoxFieldNumber = 1;
  inline const ::Box& box() const;
  inline ::Box* mutable_box();
  inline ::Box* release_box();
  inline void set_allocated_box(::Box* box);

  // required string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:Row)
 private:
  inline void set_has_box();
  inline void clear_has_box();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Box* box_;
  ::std::string* value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_tabletserver_2eproto();
  friend void protobuf_AssignDesc_tabletserver_2eproto();
  friend void protobuf_ShutdownFile_tabletserver_2eproto();

  void InitAsDefaultInstance();
  static Row* default_instance_;
};
// -------------------------------------------------------------------

class Table : public ::google::protobuf::Message {
 public:
  Table();
  virtual ~Table();

  Table(const Table& from);

  inline Table& operator=(const Table& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Table& default_instance();

  void Swap(Table* other);

  // implements Message ----------------------------------------------

  Table* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Table& from);
  void MergeFrom(const Table& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 dim = 2;
  inline bool has_dim() const;
  inline void clear_dim();
  static const int kDimFieldNumber = 2;
  inline ::google::protobuf::int32 dim() const;
  inline void set_dim(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Table)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_dim();
  inline void clear_has_dim();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 dim_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_tabletserver_2eproto();
  friend void protobuf_AssignDesc_tabletserver_2eproto();
  friend void protobuf_ShutdownFile_tabletserver_2eproto();

  void InitAsDefaultInstance();
  static Table* default_instance_;
};
// -------------------------------------------------------------------

class Status : public ::google::protobuf::Message {
 public:
  Status();
  virtual ~Status();

  Status(const Status& from);

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Status& default_instance();

  void Swap(Status* other);

  // implements Message ----------------------------------------------

  Status* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Status& from);
  void MergeFrom(const Status& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Status_StatusValues StatusValues;
  static const StatusValues Success = Status_StatusValues_Success;
  static const StatusValues WrongDimension = Status_StatusValues_WrongDimension;
  static const StatusValues NoSuchTablet = Status_StatusValues_NoSuchTablet;
  static const StatusValues NoSuchRow = Status_StatusValues_NoSuchRow;
  static inline bool StatusValues_IsValid(int value) {
    return Status_StatusValues_IsValid(value);
  }
  static const StatusValues StatusValues_MIN =
    Status_StatusValues_StatusValues_MIN;
  static const StatusValues StatusValues_MAX =
    Status_StatusValues_StatusValues_MAX;
  static const int StatusValues_ARRAYSIZE =
    Status_StatusValues_StatusValues_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  StatusValues_descriptor() {
    return Status_StatusValues_descriptor();
  }
  static inline const ::std::string& StatusValues_Name(StatusValues value) {
    return Status_StatusValues_Name(value);
  }
  static inline bool StatusValues_Parse(const ::std::string& name,
      StatusValues* value) {
    return Status_StatusValues_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .Status.StatusValues status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline ::Status_StatusValues status() const;
  inline void set_status(::Status_StatusValues value);

  // @@protoc_insertion_point(class_scope:Status)
 private:
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_tabletserver_2eproto();
  friend void protobuf_AssignDesc_tabletserver_2eproto();
  friend void protobuf_ShutdownFile_tabletserver_2eproto();

  void InitAsDefaultInstance();
  static Status* default_instance_;
};
// -------------------------------------------------------------------

class InsertRequest : public ::google::protobuf::Message {
 public:
  InsertRequest();
  virtual ~InsertRequest();

  InsertRequest(const InsertRequest& from);

  inline InsertRequest& operator=(const InsertRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InsertRequest& default_instance();

  void Swap(InsertRequest* other);

  // implements Message ----------------------------------------------

  InsertRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InsertRequest& from);
  void MergeFrom(const InsertRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string tablet = 1;
  inline bool has_tablet() const;
  inline void clear_tablet();
  static const int kTabletFieldNumber = 1;
  inline const ::std::string& tablet() const;
  inline void set_tablet(const ::std::string& value);
  inline void set_tablet(const char* value);
  inline void set_tablet(const char* value, size_t size);
  inline ::std::string* mutable_tablet();
  inline ::std::string* release_tablet();
  inline void set_allocated_tablet(::std::string* tablet);

  // required .Row data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::Row& data() const;
  inline ::Row* mutable_data();
  inline ::Row* release_data();
  inline void set_allocated_data(::Row* data);

  // @@protoc_insertion_point(class_scope:InsertRequest)
 private:
  inline void set_has_tablet();
  inline void clear_has_tablet();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* tablet_;
  ::Row* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_tabletserver_2eproto();
  friend void protobuf_AssignDesc_tabletserver_2eproto();
  friend void protobuf_ShutdownFile_tabletserver_2eproto();

  void InitAsDefaultInstance();
  static InsertRequest* default_instance_;
};
// -------------------------------------------------------------------

class RemoveRequest : public ::google::protobuf::Message {
 public:
  RemoveRequest();
  virtual ~RemoveRequest();

  RemoveRequest(const RemoveRequest& from);

  inline RemoveRequest& operator=(const RemoveRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveRequest& default_instance();

  void Swap(RemoveRequest* other);

  // implements Message ----------------------------------------------

  RemoveRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RemoveRequest& from);
  void MergeFrom(const RemoveRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string tablet = 1;
  inline bool has_tablet() const;
  inline void clear_tablet();
  static const int kTabletFieldNumber = 1;
  inline const ::std::string& tablet() const;
  inline void set_tablet(const ::std::string& value);
  inline void set_tablet(const char* value);
  inline void set_tablet(const char* value, size_t size);
  inline ::std::string* mutable_tablet();
  inline ::std::string* release_tablet();
  inline void set_allocated_tablet(::std::string* tablet);

  // required .Box key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline const ::Box& key() const;
  inline ::Box* mutable_key();
  inline ::Box* release_key();
  inline void set_allocated_key(::Box* key);

  // @@protoc_insertion_point(class_scope:RemoveRequest)
 private:
  inline void set_has_tablet();
  inline void clear_has_tablet();
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* tablet_;
  ::Box* key_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_tabletserver_2eproto();
  friend void protobuf_AssignDesc_tabletserver_2eproto();
  friend void protobuf_ShutdownFile_tabletserver_2eproto();

  void InitAsDefaultInstance();
  static RemoveRequest* default_instance_;
};
// -------------------------------------------------------------------

class QueryRequest : public ::google::protobuf::Message {
 public:
  QueryRequest();
  virtual ~QueryRequest();

  QueryRequest(const QueryRequest& from);

  inline QueryRequest& operator=(const QueryRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryRequest& default_instance();

  void Swap(QueryRequest* other);

  // implements Message ----------------------------------------------

  QueryRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryRequest& from);
  void MergeFrom(const QueryRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string tablet = 1;
  inline bool has_tablet() const;
  inline void clear_tablet();
  static const int kTabletFieldNumber = 1;
  inline const ::std::string& tablet() const;
  inline void set_tablet(const ::std::string& value);
  inline void set_tablet(const char* value);
  inline void set_tablet(const char* value, size_t size);
  inline ::std::string* mutable_tablet();
  inline ::std::string* release_tablet();
  inline void set_allocated_tablet(::std::string* tablet);

  // required .Box query = 2;
  inline bool has_query() const;
  inline void clear_query();
  static const int kQueryFieldNumber = 2;
  inline const ::Box& query() const;
  inline ::Box* mutable_query();
  inline ::Box* release_query();
  inline void set_allocated_query(::Box* query);

  // required bool is_within = 3;
  inline bool has_is_within() const;
  inline void clear_is_within();
  static const int kIsWithinFieldNumber = 3;
  inline bool is_within() const;
  inline void set_is_within(bool value);

  // @@protoc_insertion_point(class_scope:QueryRequest)
 private:
  inline void set_has_tablet();
  inline void clear_has_tablet();
  inline void set_has_query();
  inline void clear_has_query();
  inline void set_has_is_within();
  inline void clear_has_is_within();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* tablet_;
  ::Box* query_;
  bool is_within_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_tabletserver_2eproto();
  friend void protobuf_AssignDesc_tabletserver_2eproto();
  friend void protobuf_ShutdownFile_tabletserver_2eproto();

  void InitAsDefaultInstance();
  static QueryRequest* default_instance_;
};
// -------------------------------------------------------------------

class QueryResponse : public ::google::protobuf::Message {
 public:
  QueryResponse();
  virtual ~QueryResponse();

  QueryResponse(const QueryResponse& from);

  inline QueryResponse& operator=(const QueryResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryResponse& default_instance();

  void Swap(QueryResponse* other);

  // implements Message ----------------------------------------------

  QueryResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryResponse& from);
  void MergeFrom(const QueryResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Status status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline const ::Status& status() const;
  inline ::Status* mutable_status();
  inline ::Status* release_status();
  inline void set_allocated_status(::Status* status);

  // repeated .Row results = 2;
  inline int results_size() const;
  inline void clear_results();
  static const int kResultsFieldNumber = 2;
  inline const ::Row& results(int index) const;
  inline ::Row* mutable_results(int index);
  inline ::Row* add_results();
  inline const ::google::protobuf::RepeatedPtrField< ::Row >&
      results() const;
  inline ::google::protobuf::RepeatedPtrField< ::Row >*
      mutable_results();

  // @@protoc_insertion_point(class_scope:QueryResponse)
 private:
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Status* status_;
  ::google::protobuf::RepeatedPtrField< ::Row > results_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_tabletserver_2eproto();
  friend void protobuf_AssignDesc_tabletserver_2eproto();
  friend void protobuf_ShutdownFile_tabletserver_2eproto();

  void InitAsDefaultInstance();
  static QueryResponse* default_instance_;
};
// -------------------------------------------------------------------

class ListRequest : public ::google::protobuf::Message {
 public:
  ListRequest();
  virtual ~ListRequest();

  ListRequest(const ListRequest& from);

  inline ListRequest& operator=(const ListRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListRequest& default_instance();

  void Swap(ListRequest* other);

  // implements Message ----------------------------------------------

  ListRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ListRequest& from);
  void MergeFrom(const ListRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ListRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_tabletserver_2eproto();
  friend void protobuf_AssignDesc_tabletserver_2eproto();
  friend void protobuf_ShutdownFile_tabletserver_2eproto();

  void InitAsDefaultInstance();
  static ListRequest* default_instance_;
};
// -------------------------------------------------------------------

class TabletDescription : public ::google::protobuf::Message {
 public:
  TabletDescription();
  virtual ~TabletDescription();

  TabletDescription(const TabletDescription& from);

  inline TabletDescription& operator=(const TabletDescription& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TabletDescription& default_instance();

  void Swap(TabletDescription* other);

  // implements Message ----------------------------------------------

  TabletDescription* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TabletDescription& from);
  void MergeFrom(const TabletDescription& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 dim = 2;
  inline bool has_dim() const;
  inline void clear_dim();
  static const int kDimFieldNumber = 2;
  inline ::google::protobuf::int32 dim() const;
  inline void set_dim(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TabletDescription)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_dim();
  inline void clear_has_dim();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 dim_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_tabletserver_2eproto();
  friend void protobuf_AssignDesc_tabletserver_2eproto();
  friend void protobuf_ShutdownFile_tabletserver_2eproto();

  void InitAsDefaultInstance();
  static TabletDescription* default_instance_;
};
// -------------------------------------------------------------------

class ListResponse : public ::google::protobuf::Message {
 public:
  ListResponse();
  virtual ~ListResponse();

  ListResponse(const ListResponse& from);

  inline ListResponse& operator=(const ListResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListResponse& default_instance();

  void Swap(ListResponse* other);

  // implements Message ----------------------------------------------

  ListResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ListResponse& from);
  void MergeFrom(const ListResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TabletDescription results = 1;
  inline int results_size() const;
  inline void clear_results();
  static const int kResultsFieldNumber = 1;
  inline const ::TabletDescription& results(int index) const;
  inline ::TabletDescription* mutable_results(int index);
  inline ::TabletDescription* add_results();
  inline const ::google::protobuf::RepeatedPtrField< ::TabletDescription >&
      results() const;
  inline ::google::protobuf::RepeatedPtrField< ::TabletDescription >*
      mutable_results();

  // @@protoc_insertion_point(class_scope:ListResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::TabletDescription > results_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_tabletserver_2eproto();
  friend void protobuf_AssignDesc_tabletserver_2eproto();
  friend void protobuf_ShutdownFile_tabletserver_2eproto();

  void InitAsDefaultInstance();
  static ListResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// Box

// repeated double start = 1;
inline int Box::start_size() const {
  return start_.size();
}
inline void Box::clear_start() {
  start_.Clear();
}
inline double Box::start(int index) const {
  return start_.Get(index);
}
inline void Box::set_start(int index, double value) {
  start_.Set(index, value);
}
inline void Box::add_start(double value) {
  start_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
Box::start() const {
  return start_;
}
inline ::google::protobuf::RepeatedField< double >*
Box::mutable_start() {
  return &start_;
}

// repeated double end = 2;
inline int Box::end_size() const {
  return end_.size();
}
inline void Box::clear_end() {
  end_.Clear();
}
inline double Box::end(int index) const {
  return end_.Get(index);
}
inline void Box::set_end(int index, double value) {
  end_.Set(index, value);
}
inline void Box::add_end(double value) {
  end_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
Box::end() const {
  return end_;
}
inline ::google::protobuf::RepeatedField< double >*
Box::mutable_end() {
  return &end_;
}

// -------------------------------------------------------------------

// Row

// required .Box box = 1;
inline bool Row::has_box() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Row::set_has_box() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Row::clear_has_box() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Row::clear_box() {
  if (box_ != NULL) box_->::Box::Clear();
  clear_has_box();
}
inline const ::Box& Row::box() const {
  return box_ != NULL ? *box_ : *default_instance_->box_;
}
inline ::Box* Row::mutable_box() {
  set_has_box();
  if (box_ == NULL) box_ = new ::Box;
  return box_;
}
inline ::Box* Row::release_box() {
  clear_has_box();
  ::Box* temp = box_;
  box_ = NULL;
  return temp;
}
inline void Row::set_allocated_box(::Box* box) {
  delete box_;
  box_ = box;
  if (box) {
    set_has_box();
  } else {
    clear_has_box();
  }
}

// required string value = 2;
inline bool Row::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Row::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Row::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Row::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& Row::value() const {
  return *value_;
}
inline void Row::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void Row::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void Row::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Row::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* Row::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Row::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Table

// required string name = 1;
inline bool Table::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Table::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Table::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Table::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Table::name() const {
  return *name_;
}
inline void Table::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Table::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Table::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Table::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Table::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Table::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 dim = 2;
inline bool Table::has_dim() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Table::set_has_dim() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Table::clear_has_dim() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Table::clear_dim() {
  dim_ = 0;
  clear_has_dim();
}
inline ::google::protobuf::int32 Table::dim() const {
  return dim_;
}
inline void Table::set_dim(::google::protobuf::int32 value) {
  set_has_dim();
  dim_ = value;
}

// -------------------------------------------------------------------

// Status

// required .Status.StatusValues status = 1;
inline bool Status::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Status::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Status::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Status::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::Status_StatusValues Status::status() const {
  return static_cast< ::Status_StatusValues >(status_);
}
inline void Status::set_status(::Status_StatusValues value) {
  assert(::Status_StatusValues_IsValid(value));
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// InsertRequest

// required string tablet = 1;
inline bool InsertRequest::has_tablet() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InsertRequest::set_has_tablet() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InsertRequest::clear_has_tablet() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InsertRequest::clear_tablet() {
  if (tablet_ != &::google::protobuf::internal::kEmptyString) {
    tablet_->clear();
  }
  clear_has_tablet();
}
inline const ::std::string& InsertRequest::tablet() const {
  return *tablet_;
}
inline void InsertRequest::set_tablet(const ::std::string& value) {
  set_has_tablet();
  if (tablet_ == &::google::protobuf::internal::kEmptyString) {
    tablet_ = new ::std::string;
  }
  tablet_->assign(value);
}
inline void InsertRequest::set_tablet(const char* value) {
  set_has_tablet();
  if (tablet_ == &::google::protobuf::internal::kEmptyString) {
    tablet_ = new ::std::string;
  }
  tablet_->assign(value);
}
inline void InsertRequest::set_tablet(const char* value, size_t size) {
  set_has_tablet();
  if (tablet_ == &::google::protobuf::internal::kEmptyString) {
    tablet_ = new ::std::string;
  }
  tablet_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InsertRequest::mutable_tablet() {
  set_has_tablet();
  if (tablet_ == &::google::protobuf::internal::kEmptyString) {
    tablet_ = new ::std::string;
  }
  return tablet_;
}
inline ::std::string* InsertRequest::release_tablet() {
  clear_has_tablet();
  if (tablet_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tablet_;
    tablet_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InsertRequest::set_allocated_tablet(::std::string* tablet) {
  if (tablet_ != &::google::protobuf::internal::kEmptyString) {
    delete tablet_;
  }
  if (tablet) {
    set_has_tablet();
    tablet_ = tablet;
  } else {
    clear_has_tablet();
    tablet_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .Row data = 2;
inline bool InsertRequest::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InsertRequest::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InsertRequest::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InsertRequest::clear_data() {
  if (data_ != NULL) data_->::Row::Clear();
  clear_has_data();
}
inline const ::Row& InsertRequest::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::Row* InsertRequest::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::Row;
  return data_;
}
inline ::Row* InsertRequest::release_data() {
  clear_has_data();
  ::Row* temp = data_;
  data_ = NULL;
  return temp;
}
inline void InsertRequest::set_allocated_data(::Row* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// RemoveRequest

// required string tablet = 1;
inline bool RemoveRequest::has_tablet() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RemoveRequest::set_has_tablet() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RemoveRequest::clear_has_tablet() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RemoveRequest::clear_tablet() {
  if (tablet_ != &::google::protobuf::internal::kEmptyString) {
    tablet_->clear();
  }
  clear_has_tablet();
}
inline const ::std::string& RemoveRequest::tablet() const {
  return *tablet_;
}
inline void RemoveRequest::set_tablet(const ::std::string& value) {
  set_has_tablet();
  if (tablet_ == &::google::protobuf::internal::kEmptyString) {
    tablet_ = new ::std::string;
  }
  tablet_->assign(value);
}
inline void RemoveRequest::set_tablet(const char* value) {
  set_has_tablet();
  if (tablet_ == &::google::protobuf::internal::kEmptyString) {
    tablet_ = new ::std::string;
  }
  tablet_->assign(value);
}
inline void RemoveRequest::set_tablet(const char* value, size_t size) {
  set_has_tablet();
  if (tablet_ == &::google::protobuf::internal::kEmptyString) {
    tablet_ = new ::std::string;
  }
  tablet_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RemoveRequest::mutable_tablet() {
  set_has_tablet();
  if (tablet_ == &::google::protobuf::internal::kEmptyString) {
    tablet_ = new ::std::string;
  }
  return tablet_;
}
inline ::std::string* RemoveRequest::release_tablet() {
  clear_has_tablet();
  if (tablet_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tablet_;
    tablet_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RemoveRequest::set_allocated_tablet(::std::string* tablet) {
  if (tablet_ != &::google::protobuf::internal::kEmptyString) {
    delete tablet_;
  }
  if (tablet) {
    set_has_tablet();
    tablet_ = tablet;
  } else {
    clear_has_tablet();
    tablet_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .Box key = 2;
inline bool RemoveRequest::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RemoveRequest::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RemoveRequest::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RemoveRequest::clear_key() {
  if (key_ != NULL) key_->::Box::Clear();
  clear_has_key();
}
inline const ::Box& RemoveRequest::key() const {
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
inline ::Box* RemoveRequest::mutable_key() {
  set_has_key();
  if (key_ == NULL) key_ = new ::Box;
  return key_;
}
inline ::Box* RemoveRequest::release_key() {
  clear_has_key();
  ::Box* temp = key_;
  key_ = NULL;
  return temp;
}
inline void RemoveRequest::set_allocated_key(::Box* key) {
  delete key_;
  key_ = key;
  if (key) {
    set_has_key();
  } else {
    clear_has_key();
  }
}

// -------------------------------------------------------------------

// QueryRequest

// required string tablet = 1;
inline bool QueryRequest::has_tablet() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryRequest::set_has_tablet() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryRequest::clear_has_tablet() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryRequest::clear_tablet() {
  if (tablet_ != &::google::protobuf::internal::kEmptyString) {
    tablet_->clear();
  }
  clear_has_tablet();
}
inline const ::std::string& QueryRequest::tablet() const {
  return *tablet_;
}
inline void QueryRequest::set_tablet(const ::std::string& value) {
  set_has_tablet();
  if (tablet_ == &::google::protobuf::internal::kEmptyString) {
    tablet_ = new ::std::string;
  }
  tablet_->assign(value);
}
inline void QueryRequest::set_tablet(const char* value) {
  set_has_tablet();
  if (tablet_ == &::google::protobuf::internal::kEmptyString) {
    tablet_ = new ::std::string;
  }
  tablet_->assign(value);
}
inline void QueryRequest::set_tablet(const char* value, size_t size) {
  set_has_tablet();
  if (tablet_ == &::google::protobuf::internal::kEmptyString) {
    tablet_ = new ::std::string;
  }
  tablet_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QueryRequest::mutable_tablet() {
  set_has_tablet();
  if (tablet_ == &::google::protobuf::internal::kEmptyString) {
    tablet_ = new ::std::string;
  }
  return tablet_;
}
inline ::std::string* QueryRequest::release_tablet() {
  clear_has_tablet();
  if (tablet_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tablet_;
    tablet_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void QueryRequest::set_allocated_tablet(::std::string* tablet) {
  if (tablet_ != &::google::protobuf::internal::kEmptyString) {
    delete tablet_;
  }
  if (tablet) {
    set_has_tablet();
    tablet_ = tablet;
  } else {
    clear_has_tablet();
    tablet_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .Box query = 2;
inline bool QueryRequest::has_query() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryRequest::set_has_query() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryRequest::clear_has_query() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryRequest::clear_query() {
  if (query_ != NULL) query_->::Box::Clear();
  clear_has_query();
}
inline const ::Box& QueryRequest::query() const {
  return query_ != NULL ? *query_ : *default_instance_->query_;
}
inline ::Box* QueryRequest::mutable_query() {
  set_has_query();
  if (query_ == NULL) query_ = new ::Box;
  return query_;
}
inline ::Box* QueryRequest::release_query() {
  clear_has_query();
  ::Box* temp = query_;
  query_ = NULL;
  return temp;
}
inline void QueryRequest::set_allocated_query(::Box* query) {
  delete query_;
  query_ = query;
  if (query) {
    set_has_query();
  } else {
    clear_has_query();
  }
}

// required bool is_within = 3;
inline bool QueryRequest::has_is_within() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QueryRequest::set_has_is_within() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QueryRequest::clear_has_is_within() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QueryRequest::clear_is_within() {
  is_within_ = false;
  clear_has_is_within();
}
inline bool QueryRequest::is_within() const {
  return is_within_;
}
inline void QueryRequest::set_is_within(bool value) {
  set_has_is_within();
  is_within_ = value;
}

// -------------------------------------------------------------------

// QueryResponse

// required .Status status = 1;
inline bool QueryResponse::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryResponse::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryResponse::clear_status() {
  if (status_ != NULL) status_->::Status::Clear();
  clear_has_status();
}
inline const ::Status& QueryResponse::status() const {
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::Status* QueryResponse::mutable_status() {
  set_has_status();
  if (status_ == NULL) status_ = new ::Status;
  return status_;
}
inline ::Status* QueryResponse::release_status() {
  clear_has_status();
  ::Status* temp = status_;
  status_ = NULL;
  return temp;
}
inline void QueryResponse::set_allocated_status(::Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    set_has_status();
  } else {
    clear_has_status();
  }
}

// repeated .Row results = 2;
inline int QueryResponse::results_size() const {
  return results_.size();
}
inline void QueryResponse::clear_results() {
  results_.Clear();
}
inline const ::Row& QueryResponse::results(int index) const {
  return results_.Get(index);
}
inline ::Row* QueryResponse::mutable_results(int index) {
  return results_.Mutable(index);
}
inline ::Row* QueryResponse::add_results() {
  return results_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Row >&
QueryResponse::results() const {
  return results_;
}
inline ::google::protobuf::RepeatedPtrField< ::Row >*
QueryResponse::mutable_results() {
  return &results_;
}

// -------------------------------------------------------------------

// ListRequest

// -------------------------------------------------------------------

// TabletDescription

// required string name = 1;
inline bool TabletDescription::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TabletDescription::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TabletDescription::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TabletDescription::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& TabletDescription::name() const {
  return *name_;
}
inline void TabletDescription::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void TabletDescription::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void TabletDescription::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TabletDescription::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* TabletDescription::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TabletDescription::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 dim = 2;
inline bool TabletDescription::has_dim() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TabletDescription::set_has_dim() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TabletDescription::clear_has_dim() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TabletDescription::clear_dim() {
  dim_ = 0;
  clear_has_dim();
}
inline ::google::protobuf::int32 TabletDescription::dim() const {
  return dim_;
}
inline void TabletDescription::set_dim(::google::protobuf::int32 value) {
  set_has_dim();
  dim_ = value;
}

// -------------------------------------------------------------------

// ListResponse

// repeated .TabletDescription results = 1;
inline int ListResponse::results_size() const {
  return results_.size();
}
inline void ListResponse::clear_results() {
  results_.Clear();
}
inline const ::TabletDescription& ListResponse::results(int index) const {
  return results_.Get(index);
}
inline ::TabletDescription* ListResponse::mutable_results(int index) {
  return results_.Mutable(index);
}
inline ::TabletDescription* ListResponse::add_results() {
  return results_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TabletDescription >&
ListResponse::results() const {
  return results_;
}
inline ::google::protobuf::RepeatedPtrField< ::TabletDescription >*
ListResponse::mutable_results() {
  return &results_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Status_StatusValues>() {
  return ::Status_StatusValues_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tabletserver_2eproto__INCLUDED
