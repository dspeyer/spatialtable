// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "tabletserver.rpcz.h"
#include "tabletserver.pb.h"
#include <google/protobuf/descriptor.h>
#include <google/protobuf/stubs/once.h>
#include <rpcz/rpcz.hpp>
namespace {
const ::google::protobuf::ServiceDescriptor* TabletServerService_descriptor_ = NULL;
}  // anonymouse namespace

void rpcz_protobuf_AssignDesc_tabletserver_2eproto() {
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tabletserver.proto");
  GOOGLE_CHECK(file != NULL);
  TabletServerService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &rpcz_protobuf_AssignDesc_tabletserver_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void rpcz_protobuf_ShutdownFile_tabletserver_2eproto() {
}

void rpcz_protobuf_AddDesc_tabletserver_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022tabletserver.proto\"!\n\003Box\022\r\n\005start\030\001 \003"
    "(\001\022\013\n\003end\030\002 \003(\001\"\'\n\003Row\022\021\n\003box\030\001 \002(\0132\004.Bo"
    "x\022\r\n\005value\030\002 \002(\t\"\"\n\005Table\022\014\n\004name\030\001 \002(\t\022"
    "\013\n\003dim\030\002 \002(\005\"\200\001\n\006Status\022$\n\006status\030\001 \002(\0162"
    "\024.Status.StatusValues\"P\n\014StatusValues\022\013\n"
    "\007Success\020\000\022\022\n\016WrongDimension\020\001\022\020\n\014NoSuch"
    "Tablet\020\002\022\r\n\tNoSuchRow\020\003\"3\n\rInsertRequest"
    "\022\016\n\006tablet\030\001 \002(\t\022\022\n\004data\030\002 \002(\0132\004.Row\"2\n\r"
    "RemoveRequest\022\016\n\006tablet\030\001 \002(\t\022\021\n\003key\030\002 \002"
    "(\0132\004.Box\"F\n\014QueryRequest\022\016\n\006tablet\030\001 \002(\t"
    "\022\023\n\005query\030\002 \002(\0132\004.Box\022\021\n\tis_within\030\003 \002(\010"
    "\"\?\n\rQueryResponse\022\027\n\006status\030\001 \002(\0132\007.Stat"
    "us\022\025\n\007results\030\002 \003(\0132\004.Row\"\r\n\013ListRequest"
    "\".\n\021TabletDescription\022\014\n\004name\030\001 \002(\t\022\013\n\003d"
    "im\030\002 \002(\005\"3\n\014ListResponse\022#\n\007results\030\001 \003("
    "\0132\022.TabletDescription2\317\001\n\023TabletServerSe"
    "rvice\022\036\n\013CreateTable\022\006.Table\032\007.Status\022!\n"
    "\006Insert\022\016.InsertRequest\032\007.Status\022!\n\006Remo"
    "ve\022\016.RemoveRequest\032\007.Status\022&\n\005Query\022\r.Q"
    "ueryRequest\032\016.QueryResponse\022*\n\013ListTable"
    "ts\022\014.ListRequest\032\r.ListResponse", 831);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tabletserver.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&rpcz_protobuf_ShutdownFile_tabletserver_2eproto);
}

// ===================================================================

TabletServerService::~TabletServerService() {}

const ::google::protobuf::ServiceDescriptor* TabletServerService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TabletServerService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* TabletServerService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return TabletServerService_descriptor_;
}

void TabletServerService::CreateTable(const ::Table&,
                         ::rpcz::reply< ::Status> reply) {
  reply.Error(::rpcz::application_error::METHOD_NOT_IMPLEMENTED,
              "Method CreateTable() not implemented.");
}

void TabletServerService::Insert(const ::InsertRequest&,
                         ::rpcz::reply< ::Status> reply) {
  reply.Error(::rpcz::application_error::METHOD_NOT_IMPLEMENTED,
              "Method Insert() not implemented.");
}

void TabletServerService::Remove(const ::RemoveRequest&,
                         ::rpcz::reply< ::Status> reply) {
  reply.Error(::rpcz::application_error::METHOD_NOT_IMPLEMENTED,
              "Method Remove() not implemented.");
}

void TabletServerService::Query(const ::QueryRequest&,
                         ::rpcz::reply< ::QueryResponse> reply) {
  reply.Error(::rpcz::application_error::METHOD_NOT_IMPLEMENTED,
              "Method Query() not implemented.");
}

void TabletServerService::ListTablets(const ::ListRequest&,
                         ::rpcz::reply< ::ListResponse> reply) {
  reply.Error(::rpcz::application_error::METHOD_NOT_IMPLEMENTED,
              "Method ListTablets() not implemented.");
}

void TabletServerService::call_method(const ::google::protobuf::MethodDescriptor* method,
                             const ::google::protobuf::Message& request,
                             ::rpcz::server_channel* channel) {
  GOOGLE_DCHECK_EQ(method->service(), TabletServerService_descriptor_);
  switch(method->index()) {
    case 0:
      CreateTable(
          *::google::protobuf::down_cast<const ::Table*>(&request),
          ::rpcz::reply< ::Status>(channel));
      break;
    case 1:
      Insert(
          *::google::protobuf::down_cast<const ::InsertRequest*>(&request),
          ::rpcz::reply< ::Status>(channel));
      break;
    case 2:
      Remove(
          *::google::protobuf::down_cast<const ::RemoveRequest*>(&request),
          ::rpcz::reply< ::Status>(channel));
      break;
    case 3:
      Query(
          *::google::protobuf::down_cast<const ::QueryRequest*>(&request),
          ::rpcz::reply< ::QueryResponse>(channel));
      break;
    case 4:
      ListTablets(
          *::google::protobuf::down_cast<const ::ListRequest*>(&request),
          ::rpcz::reply< ::ListResponse>(channel));
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& TabletServerService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::Table::default_instance();
    case 1:
      return ::InsertRequest::default_instance();
    case 2:
      return ::RemoveRequest::default_instance();
    case 3:
      return ::QueryRequest::default_instance();
    case 4:
      return ::ListRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& TabletServerService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::Status::default_instance();
    case 1:
      return ::Status::default_instance();
    case 2:
      return ::Status::default_instance();
    case 3:
      return ::QueryResponse::default_instance();
    case 4:
      return ::ListResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

TabletServerService_Stub::TabletServerService_Stub(::rpcz::rpc_channel* channel,
                                   const ::std::string& service_name,
                                   bool owns_channel)
  : channel_(channel), service_name_(service_name),
    owns_channel_(owns_channel) {}
TabletServerService_Stub::TabletServerService_Stub(::rpcz::rpc_channel* channel,
                                   bool owns_channel)
  : channel_(channel), service_name_(TabletServerService::descriptor()->name()),
    owns_channel_(owns_channel) {}
TabletServerService_Stub::~TabletServerService_Stub() {
  if (owns_channel_) delete channel_;
}

void TabletServerService_Stub::CreateTable(const ::Table& request,
                              ::Status* response,
                              ::rpcz::rpc* rpc,
                              ::rpcz::closure* done) {
  channel_->call_method(service_name_,
                        TabletServerService::descriptor()->method(0),
                        request, response, rpc, done);
}
void TabletServerService_Stub::CreateTable(const ::Table& request,
                              ::Status* response,
                              long deadline_ms) {
  ::rpcz::rpc rpc;
  rpc.set_deadline_ms(deadline_ms);
  channel_->call_method(service_name_,
                        TabletServerService::descriptor()->method(0),
                        request, response, &rpc, NULL);
  rpc.wait();
  if (!rpc.ok()) {
    throw ::rpcz::rpc_error(rpc);
  }
}
void TabletServerService_Stub::Insert(const ::InsertRequest& request,
                              ::Status* response,
                              ::rpcz::rpc* rpc,
                              ::rpcz::closure* done) {
  channel_->call_method(service_name_,
                        TabletServerService::descriptor()->method(1),
                        request, response, rpc, done);
}
void TabletServerService_Stub::Insert(const ::InsertRequest& request,
                              ::Status* response,
                              long deadline_ms) {
  ::rpcz::rpc rpc;
  rpc.set_deadline_ms(deadline_ms);
  channel_->call_method(service_name_,
                        TabletServerService::descriptor()->method(1),
                        request, response, &rpc, NULL);
  rpc.wait();
  if (!rpc.ok()) {
    throw ::rpcz::rpc_error(rpc);
  }
}
void TabletServerService_Stub::Remove(const ::RemoveRequest& request,
                              ::Status* response,
                              ::rpcz::rpc* rpc,
                              ::rpcz::closure* done) {
  channel_->call_method(service_name_,
                        TabletServerService::descriptor()->method(2),
                        request, response, rpc, done);
}
void TabletServerService_Stub::Remove(const ::RemoveRequest& request,
                              ::Status* response,
                              long deadline_ms) {
  ::rpcz::rpc rpc;
  rpc.set_deadline_ms(deadline_ms);
  channel_->call_method(service_name_,
                        TabletServerService::descriptor()->method(2),
                        request, response, &rpc, NULL);
  rpc.wait();
  if (!rpc.ok()) {
    throw ::rpcz::rpc_error(rpc);
  }
}
void TabletServerService_Stub::Query(const ::QueryRequest& request,
                              ::QueryResponse* response,
                              ::rpcz::rpc* rpc,
                              ::rpcz::closure* done) {
  channel_->call_method(service_name_,
                        TabletServerService::descriptor()->method(3),
                        request, response, rpc, done);
}
void TabletServerService_Stub::Query(const ::QueryRequest& request,
                              ::QueryResponse* response,
                              long deadline_ms) {
  ::rpcz::rpc rpc;
  rpc.set_deadline_ms(deadline_ms);
  channel_->call_method(service_name_,
                        TabletServerService::descriptor()->method(3),
                        request, response, &rpc, NULL);
  rpc.wait();
  if (!rpc.ok()) {
    throw ::rpcz::rpc_error(rpc);
  }
}
void TabletServerService_Stub::ListTablets(const ::ListRequest& request,
                              ::ListResponse* response,
                              ::rpcz::rpc* rpc,
                              ::rpcz::closure* done) {
  channel_->call_method(service_name_,
                        TabletServerService::descriptor()->method(4),
                        request, response, rpc, done);
}
void TabletServerService_Stub::ListTablets(const ::ListRequest& request,
                              ::ListResponse* response,
                              long deadline_ms) {
  ::rpcz::rpc rpc;
  rpc.set_deadline_ms(deadline_ms);
  channel_->call_method(service_name_,
                        TabletServerService::descriptor()->method(4),
                        request, response, &rpc, NULL);
  rpc.wait();
  if (!rpc.ok()) {
    throw ::rpcz::rpc_error(rpc);
  }
}
